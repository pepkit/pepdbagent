"""Initial migration

Revision ID: 44cb1e7a80de
Revises:
Create Date: 2025-03-27 12:50:09.406217

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.schema import FetchedValue

# revision identifiers, used by Alembic.
revision: str = "44cb1e7a80de"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bedbase_stats",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("gse", sa.String(), nullable=False),
        sa.Column("gsm", sa.String(), nullable=False),
        sa.Column("sample_name", sa.String(), nullable=True),
        sa.Column("genome", sa.String(), nullable=True),
        sa.Column("last_update_date", sa.String(), nullable=True),
        sa.Column("submission_date", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace", sa.String(), nullable=False),
        sa.Column("number_of_projects", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace"),
    )
    op.create_table(
        "namespace_archives",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace", sa.String(), nullable=False),
        sa.Column("file_path", sa.String(), nullable=False),
        sa.Column("creation_date", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("number_of_projects", sa.Integer(), nullable=False),
        sa.Column("file_size", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["namespace"], ["users.namespace"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "schema_groups",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["namespace"], ["users.namespace"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace", "name"),
    )
    op.create_index(op.f("ix_schema_groups_id"), "schema_groups", ["id"], unique=False)
    op.create_index(op.f("ix_schema_groups_name"), "schema_groups", ["name"], unique=False)
    op.create_index(
        op.f("ix_schema_groups_namespace"), "schema_groups", ["namespace"], unique=False
    )
    op.create_table(
        "schemas",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "schema_json",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=FetchedValue(),
            nullable=False,
        ),
        sa.Column("private", sa.Boolean(), nullable=False),
        sa.Column("submission_date", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_update_date", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["namespace"], ["users.namespace"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace", "name"),
    )
    op.create_index(op.f("ix_schemas_description"), "schemas", ["description"], unique=False)
    op.create_index(op.f("ix_schemas_id"), "schemas", ["id"], unique=False)
    op.create_index(op.f("ix_schemas_name"), "schemas", ["name"], unique=False)
    op.create_table(
        "projects",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("tag", sa.String(), nullable=False),
        sa.Column("digest", sa.String(length=32), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "config",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=FetchedValue(),
            nullable=False,
        ),
        sa.Column("private", sa.Boolean(), nullable=False),
        sa.Column("number_of_samples", sa.Integer(), nullable=False),
        sa.Column("number_of_stars", sa.Integer(), nullable=False),
        sa.Column("submission_date", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_update_date", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("pep_schema", sa.String(), nullable=True),
        sa.Column("schema_id", sa.Integer(), nullable=True),
        sa.Column("pop", sa.Boolean(), nullable=True),
        sa.Column("forked_from_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["forked_from_id"], ["projects.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["namespace"], ["users.namespace"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["schema_id"], ["schemas.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace", "name", "tag"),
    )
    op.create_table(
        "schema_group_relations",
        sa.Column("schema_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["schema_groups.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["schema_id"], ["schemas.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("schema_id", "group_id"),
    )
    op.create_index(
        op.f("ix_schema_group_relations_group_id"),
        "schema_group_relations",
        ["group_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_schema_group_relations_schema_id"),
        "schema_group_relations",
        ["schema_id"],
        unique=False,
    )
    op.create_table(
        "project_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("user", sa.String(), nullable=False),
        sa.Column("update_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column(
            "project_yaml",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=FetchedValue(),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user"], ["users.namespace"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "samples",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "sample",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=FetchedValue(),
            nullable=False,
        ),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("sample_name", sa.String(), nullable=True),
        sa.Column("guid", sa.String(), nullable=False),
        sa.Column("submission_date", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_update_date", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("parent_guid", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["parent_guid"], ["samples.guid"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("guid"),
    )
    op.create_table(
        "stars",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=False),
        sa.Column("star_date", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("user_id", "project_id"),
    )
    op.create_table(
        "subsamples",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "subsample",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=FetchedValue(),
            nullable=False,
        ),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("subsample_number", sa.Integer(), nullable=False),
        sa.Column("row_number", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "views",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("project_id", sa.Integer(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["project_id"], ["projects.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sample_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("history_id", sa.Integer(), nullable=False),
        sa.Column("guid", sa.String(), nullable=False),
        sa.Column("parent_guid", sa.String(), nullable=True),
        sa.Column(
            "sample_json",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=FetchedValue(),
            nullable=False,
        ),
        sa.Column(
            "change_type",
            sa.Enum("UPDATE", "INSERT", "DELETE", name="updatetypes"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["history_id"], ["project_history.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "views_samples",
        sa.Column("sample_id", sa.Integer(), nullable=False),
        sa.Column("view_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["sample_id"], ["samples.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["view_id"], ["views.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("sample_id", "view_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("views_samples")
    op.drop_table("sample_history")
    op.drop_table("views")
    op.drop_table("subsamples")
    op.drop_table("stars")
    op.drop_table("samples")
    op.drop_table("project_history")
    op.drop_index(op.f("ix_schema_group_relations_schema_id"), table_name="schema_group_relations")
    op.drop_index(op.f("ix_schema_group_relations_group_id"), table_name="schema_group_relations")
    op.drop_table("schema_group_relations")
    op.drop_table("projects")
    op.drop_index(op.f("ix_schemas_name"), table_name="schemas")
    op.drop_index(op.f("ix_schemas_id"), table_name="schemas")
    op.drop_index(op.f("ix_schemas_description"), table_name="schemas")
    op.drop_table("schemas")
    op.drop_index(op.f("ix_schema_groups_namespace"), table_name="schema_groups")
    op.drop_index(op.f("ix_schema_groups_name"), table_name="schema_groups")
    op.drop_index(op.f("ix_schema_groups_id"), table_name="schema_groups")
    op.drop_table("schema_groups")
    op.drop_table("namespace_archives")
    op.drop_table("users")
    op.drop_table("bedbase_stats")
    # ### end Alembic commands ###
