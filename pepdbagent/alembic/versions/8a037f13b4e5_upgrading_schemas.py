"""Upgrading schemas

Revision ID: 8a037f13b4e5
Revises: 44cb1e7a80de
Create Date: 2025-03-27 13:09:07.443981

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.schema import FetchedValue

# revision identifiers, used by Alembic.
revision: str = "8a037f13b4e5"
down_revision: Union[str, None] = "44cb1e7a80de"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "schema_records",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("namespace", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("maintainers", sa.String(), nullable=True),
        sa.Column("lifecycle_stage", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("private", sa.Boolean(), nullable=False),
        sa.Column("last_update_date", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["namespace"], ["users.namespace"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("namespace", "name"),
    )
    op.create_table(
        "schema_versions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("schema_id", sa.Integer(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column(
            "schema_value",
            postgresql.JSON(astext_type=sa.Text()),
            server_default=FetchedValue(),
            nullable=False,
        ),
        sa.Column("release_date", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_update_date", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("contributors", sa.String(), nullable=True),
        sa.Column("release_notes", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["schema_id"], ["schema_records.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("schema_id", "version"),
    )
    op.create_table(
        "schema_tags",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("tag_name", sa.String(), nullable=False),
        sa.Column("tag_value", sa.String(), nullable=True),
        sa.Column("schema_version_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["schema_version_id"], ["schema_versions.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index("ix_schemas_description", table_name="schemas")
    op.drop_index("ix_schemas_id", table_name="schemas")
    op.drop_index("ix_schemas_name", table_name="schemas")
    # op.drop_table('schemas')
    op.drop_constraint("projects_schema_id_fkey", "projects", type_="foreignkey")
    op.execute("DROP TABLE schemas CASCADE;")
    op.drop_index("ix_schema_groups_id", table_name="schema_groups")
    op.drop_index("ix_schema_groups_name", table_name="schema_groups")
    op.drop_index("ix_schema_groups_namespace", table_name="schema_groups")
    # op.drop_table('schema_groups')
    op.execute("DROP TABLE schema_groups CASCADE;")
    op.drop_index("ix_schema_group_relations_group_id", table_name="schema_group_relations")
    op.drop_index("ix_schema_group_relations_schema_id", table_name="schema_group_relations")
    op.drop_table("schema_group_relations")

    op.execute("UPDATE projects SET schema_id = NULL;")
    op.create_foreign_key(
        None, "projects", "schema_versions", ["schema_id"], ["id"], ondelete="SET NULL"
    )
    op.drop_column("projects", "pep_schema")
    op.add_column("users", sa.Column("number_of_schemas", sa.Integer(), nullable=True, default=0))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "number_of_schemas")
    op.add_column(
        "projects", sa.Column("pep_schema", sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.drop_constraint(None, "projects", type_="foreignkey")
    op.create_foreign_key(
        "projects_schema_id_fkey",
        "projects",
        "schemas",
        ["schema_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_table(
        "schema_group_relations",
        sa.Column("schema_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["schema_groups.id"],
            name="schema_group_relations_group_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["schema_id"],
            ["schemas.id"],
            name="schema_group_relations_schema_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("schema_id", "group_id", name="schema_group_relations_pkey"),
    )
    op.create_index(
        "ix_schema_group_relations_schema_id",
        "schema_group_relations",
        ["schema_id"],
        unique=False,
    )
    op.create_index(
        "ix_schema_group_relations_group_id", "schema_group_relations", ["group_id"], unique=False
    )
    op.create_table(
        "schema_groups",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("namespace", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["namespace"],
            ["users.namespace"],
            name="schema_groups_namespace_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="schema_groups_pkey"),
        sa.UniqueConstraint("namespace", "name", name="schema_groups_namespace_name_key"),
    )
    op.create_index("ix_schema_groups_namespace", "schema_groups", ["namespace"], unique=False)
    op.create_index("ix_schema_groups_name", "schema_groups", ["name"], unique=False)
    op.create_index("ix_schema_groups_id", "schema_groups", ["id"], unique=False)
    op.create_table(
        "schemas",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("namespace", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "schema_json",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("private", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "submission_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "last_update_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["namespace"], ["users.namespace"], name="schemas_namespace_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="schemas_pkey"),
        sa.UniqueConstraint("namespace", "name", name="schemas_namespace_name_key"),
    )
    op.create_index("ix_schemas_name", "schemas", ["name"], unique=False)
    op.create_index("ix_schemas_id", "schemas", ["id"], unique=False)
    op.create_index("ix_schemas_description", "schemas", ["description"], unique=False)
    op.drop_table("schema_tags")
    op.drop_table("schema_versions")
    op.drop_table("schema_records")
    # ### end Alembic commands ###
